Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

select count(*)
from table
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

select count(distinct key)
from table

i. Business = id: 10000
ii. Hours = business_id: 1562
iii. Category = business_id: 2643
iv. Attribute = business_id: 1115
v. Review = id: 10000
vi. Checkin = business_id: 493
vii. Photo = id: 10000
viii. Tip = business_id: 3979
ix. User = id: 10000
x. Friend = user_id: 11
xi. Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: "no"
	
	
	SQL code used to arrive at answer:

select count(*)
from user
where column is null
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

select min(column), max(column), avg(column)
from table

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0	max: 5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
select  city, 
        sum(review_count) as review_sum
from business
group by city
order by review_sum desc	
	
	Copy and Paste the Result Below:

+-----------------+------------+
| city            | review_sum |
+-----------------+------------+
| Las Vegas       |      82854 |
| Phoenix         |      34503 |
| Toronto         |      24113 |
| Scottsdale      |      20614 |
| Charlotte       |      12523 |
| Henderson       |      10871 |
| Tempe           |      10504 |
| Pittsburgh      |       9798 |
| Montréal        |       9448 |
| Chandler        |       8112 |
| Mesa            |       6875 |
| Gilbert         |       6380 |
| Cleveland       |       5593 |
| Madison         |       5265 |
| Glendale        |       4406 |
| Mississauga     |       3814 |
| Edinburgh       |       2792 |
| Peoria          |       2624 |
| North Las Vegas |       2438 |
| Markham         |       2352 |
| Champaign       |       2029 |
| Stuttgart       |       1849 |
| Surprise        |       1520 |
| Lakewood        |       1465 |
| Goodyear        |       1155 |
+-----------------+------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select  stars, 
        sum(review_count) AS review_sum
from business
where city = 'Avon'
group by stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+------------+
| stars | review_sum |
+-------+------------+
|   1.5 |         10 |
|   2.5 |          6 |
|   3.5 |         88 |
|   4.0 |         21 |
|   4.5 |         31 |
|   5.0 |          3 |
+-------+------------+

ii. Beachwood

SQL code used to arrive at answer:

select  stars, 
        sum(review_count) AS review_sum
from business
where city = 'Beachwood'
group by stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+------------+
| stars | review_sum |
+-------+------------+
|   2.0 |          8 |
|   2.5 |          3 |
|   3.0 |         11 |
|   3.5 |          6 |
|   4.0 |         69 |
|   4.5 |         17 |
|   5.0 |         23 |
+-------+------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
select  name, 
        review_count
from user
order by review_count desc
limit 3
		
	Copy and Paste the Result Below:
	
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+	


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	SQL code
	
select  name, 
        review_count,
        fans,
        useful,
        funny,
        cool,
        yelping_since
from user
order by fans desc

	Result

+-----------+--------------+------+--------+--------+--------+---------------------+
| name      | review_count | fans | useful |  funny |   cool | yelping_since       |
+-----------+--------------+------+--------+--------+--------+---------------------+
| Amy       |          609 |  503 |   3226 |   2554 |   2751 | 2007-07-19 00:00:00 |
| Mimi      |          968 |  497 |    257 |    138 |    159 | 2011-03-30 00:00:00 |
| Harald    |         1153 |  311 | 122921 | 122419 | 122890 | 2012-11-27 00:00:00 |
| Gerald    |         2000 |  253 |  17524 |   2324 |  15008 | 2012-12-16 00:00:00 |
| Christine |          930 |  173 |   4834 |   6646 |   4321 | 2009-07-08 00:00:00 |
| Lisa      |          813 |  159 |     48 |     13 |      6 | 2009-10-05 00:00:00 |
| Cat       |          377 |  133 |   1062 |    672 |   1076 | 2009-02-05 00:00:00 |
| William   |         1215 |  126 |   9363 |   9361 |   9370 | 2015-02-19 00:00:00 |
| Fran      |          862 |  124 |   9851 |   7606 |   9344 | 2012-04-05 00:00:00 |
| Lissa     |          834 |  120 |    455 |    150 |    342 | 2007-08-14 00:00:00 |
| Mark      |          861 |  115 |   4008 |    570 |   2765 | 2009-05-31 00:00:00 |
| Tiffany   |          408 |  111 |   1366 |    984 |   1279 | 2008-10-28 00:00:00 |
| bernice   |          255 |  105 |    120 |    112 |    109 | 2007-08-29 00:00:00 |
| Roanna    |         1039 |  104 |   2995 |   1188 |    636 | 2006-03-28 00:00:00 |
| Angela    |          694 |  101 |    158 |    164 |    105 | 2010-10-01 00:00:00 |
| .Hon      |         1246 |  101 |   7850 |   5851 |   5104 | 2006-07-19 00:00:00 |
| Ben       |          307 |   96 |   1180 |   1155 |   1143 | 2007-03-10 00:00:00 |
| Linda     |          584 |   89 |   3177 |   2736 |   3019 | 2005-08-07 00:00:00 |
| Christina |          842 |   85 |    158 |     34 |    102 | 2012-10-08 00:00:00 |
| Jessica   |          220 |   84 |   2161 |   2091 |   2067 | 2009-01-12 00:00:00 |
| Greg      |          408 |   81 |    820 |    753 |    746 | 2008-02-16 00:00:00 |
| Nieves    |          178 |   80 |   1091 |    774 |    940 | 2013-07-08 00:00:00 |
| Sui       |          754 |   78 |      9 |     18 |      2 | 2009-09-07 00:00:00 |
| Yuri      |         1339 |   76 |   1166 |    220 |    561 | 2008-01-03 00:00:00 |
| Nicole    |          161 |   73 |     13 |     10 |      6 | 2009-04-30 00:00:00 |
+-----------+--------------+------+--------+--------+--------+---------------------+
(Output limit exceeded, 25 of 10000 total rows shown)

It doesn't seems like fans has any linear correlation with some features tested above.
There could be another factor at play affecting the fans' number.
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

yes, "love" is in 1780 reviews text while "hate" is only in 232 reviews.
	
	SQL code used to arrive at answer:

select count(text)
from review
where text like "%love%" --then replace love with hate
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

select  name, 
        fans
from user
order by fans desc
limit 10	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

+---------+-------------+----------------------------------------+--------------------+-----------+--------------+
| city    | category    | name                                   | hours              | avg_stars | review_count |
+---------+-------------+----------------------------------------+--------------------+-----------+--------------+
| Phoenix | Restaurants | Charlie D's Catfish & Chicken          | Friday|11:00-18:00 |       4.5 |            7 |
| Phoenix | Restaurants | Bootleggers Modern American Smokehouse | Friday|11:00-22:00 |       4.0 |          431 |
| Phoenix | Restaurants | Five Guys                              | Friday|10:00-22:00 |       3.5 |           63 |
| Phoenix | Restaurants | Gallagher's                            | Friday|11:00-2:00  |       3.0 |           60 |
| Phoenix | Restaurants | McDonald's                             | Friday|5:00-0:00   |       2.0 |            8 |
+---------+-------------+----------------------------------------+--------------------+-----------+--------------+
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	Yes, I queried the tables to show open hours on Friday and each restaurant in Phoenix
	has different distribution of hours as seen in the table above. 

ii. Do the two groups you chose to analyze have a different number of reviews?
    Yes, but it doesn't correlate with the stars group where Charlie D's Catfish & Chicken
	with 4.5 stars has 7 reviews and McDonald's with 2.0 stars has 8 reviews.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	Yes, restaurants in Phoenix tend to get more stars when they open for lesser hours on Friday.
	Charlie D's Catfish & Chicken with 4.5 stars only opens for 7 hours,
	Five Guys with 3.5 stars opens for 12 hours, and
	McDonald's with 2.0 stars opens for 19 hours.

SQL code used for analysis:

select  b.city,
        c.category,
        b.name,
        h.hours,
        avg(b.stars) as avg_stars,
        b.review_count
        --count(distinct b.name)
from    (business b inner join
        category c on b.id = c.business_id) inner join
        hours h on h.business_id = b.id
where   category = 'Restaurants' and 
        city = 'Phoenix' and 
        hours like 'Friday%' 
group by stars
order by stars desc
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

+-----------+------------------------+----------------+---------+-------+
| city      | neighborhood           | business_count | is_open | stars |
+-----------+------------------------+----------------+---------+-------+
| Mesa      |                        |            338 |       0 |   2.0 |
| Charlotte | Arboretum              |             28 |       0 |   5.0 |
| Toronto   | Downtown Core          |             21 |       0 |   2.0 |
| Toronto   | Entertainment District |             36 |       0 |   3.5 |
| Cleveland | Goodrich Kirtland      |             12 |       0 |   3.5 |
| Edinburgh | New Town               |              8 |       0 |   2.0 |
| Las Vegas | Southeast              |             42 |       0 |   4.0 |
| Las Vegas | Summerlin              |             49 |       0 |   4.0 |
| Montréal  | Ville-Marie            |             30 |       0 |   3.0 |
+-----------+------------------------+----------------+---------+-------+

+-------------+------------------------+----------------+---------+-------+
| city        | neighborhood           | business_count | is_open | stars |
+-------------+------------------------+----------------+---------+-------+
| Peoria      |                        |           1662 |       1 |   3.0 |
| Henderson   | Anthem                 |             30 |       1 |   3.5 |
| Toronto     | Brockton Village       |             21 |       1 |   4.5 |
| Markham     | Brown's Corners        |             14 |       1 |   3.0 |
| Las Vegas   | Centennial             |             21 |       1 |   4.0 |
| Las Vegas   | Chinatown              |             64 |       1 |   4.0 |
| Toronto     | Downtown Core          |             21 |       1 |   3.0 |
| Toronto     | East York              |             15 |       1 |   4.5 |
| Las Vegas   | Eastside               |             49 |       1 |   2.5 |
| Toronto     | Entertainment District |             14 |       1 |   3.0 |
| Toronto     | Etobicoke              |             28 |       1 |   4.5 |
| Cleveland   | Goodrich Kirtland      |             36 |       1 |   4.5 |
| Toronto     | Greektown              |             21 |       1 |   2.5 |
| Toronto     | High Park              |            105 |       1 |   4.5 |
| Edinburgh   | Leith                  |             12 |       1 |   3.5 |
| Charlotte   | Myers Park             |             12 |       1 |   3.5 |
| Edinburgh   | New Town               |             14 |       1 |   4.0 |
| Toronto     | Niagara                |             15 |       1 |   4.0 |
| Pittsburgh  | Oakland                |             14 |       1 |   2.5 |
| Cleveland   | Ohio City              |             50 |       1 |   4.5 |
| Mississauga | Port Credit            |             35 |       1 |   4.0 |
| Toronto     | Roncesvalles           |             14 |       1 |   2.5 |
| Charlotte   | South End              |             25 |       1 |   3.5 |
| Charlotte   | South Park             |             21 |       1 |   5.0 |
| Las Vegas   | Southwest              |             28 |       1 |   3.5 |
+-------------+------------------------+----------------+---------+-------+
(Output limit exceeded, 25 of 31 total rows shown)

i. Difference 1:
    There is no open business in Arboretum, Charlotte.
	All 28 business are closed.     
         
ii. Difference 2:
    There is no open business in Southeast, Las Vegas.
	All 42 business are closed.     
         
         
SQL code used for analysis:

select  city,
        neighborhood,
        count(name) as business_count,
        is_open,
        stars
from    business
where   is_open = 1 --or 0
group by neighborhood
order by neighborhood asc	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
    Review and attributes sentiment analysis for outdoors in business.    
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
    The data required for this analysis are review texts, business attributes, stars, and city.
	Outdoor facilities are becoming more important during a pandemic. Fresh and open air would 
	prevent faster spreading of the virus. I'd like to analyze business' outdoors attributes/reviews
	in each city to see which ones already have good outdoors facilites or which ones still need more.
                  
iii. Output of your finished dataset:

+----------------+----------------+----------+---------------+
| city           | business_count | mentions |     avg_stars |
+----------------+----------------+----------+---------------+
| Toronto        |              9 |        0 |          None |
| Phoenix        |              7 |        4 |          3.75 |
| Mississauga    |              5 |        0 |          None |
| Las Vegas      |              4 |        3 | 2.33333333333 |
| Pittsburgh     |              4 |        0 |          None |
| Charlotte      |              3 |        0 |          None |
| Edinburgh      |              3 |        0 |          None |
| Glendale       |              3 |        0 |          None |
| Mesa           |              3 |        0 |          None |
| Scottsdale     |              3 |        0 |          None |
| Henderson      |              2 |        1 |           4.0 |
| Chandler       |              2 |        0 |          None |
| Montréal       |              2 |        0 |          None |
| Richmond Hill  |              2 |        0 |          None |
| Tempe          |              2 |        0 |          None |
| Strongsville   |              1 |        1 |           5.0 |
| Avon Lake      |              1 |        0 |          None |
| Bedford        |              1 |        0 |          None |
| Carnegie       |              1 |        0 |          None |
| Cave Creek     |              1 |        0 |          None |
| Champaign      |              1 |        0 |          None |
| Cleveland      |              1 |        0 |          None |
| Coraopolis     |              1 |        0 |          None |
| Cuyahoga Falls |              1 |        0 |          None |
| East York      |              1 |        0 |          None |
+----------------+----------------+----------+---------------+
(Output limit exceeded, 25 of 55 total rows shown)         
         
iv. Provide the SQL code you used to create your final dataset:

select  b.city,
        count(distinct b.name) as business_count,
        count(r.text) as mentions,    
        avg(r.stars) as avg_stars
from    business b left join
        review r on b.id = r.business_id
where   b.name in (select b.name
                   from attribute a inner join
                        business b on b.id = a.business_id
                   where a.name like '%outdoor%')
group by city
order by business_count desc, 
         mentions desc, 
         avg_stars desc